/*

SDG                                                                           JJ

                           Deserialization Tests

  These are tests for deserializing packets.

*/

package tests

import "core:encoding/hex"
import "core:fmt"
import "core:net"
import "core:sync"
import "core:testing"
import "net:quic"
import "net:ssl"

expect_array_match :: proc(t: ^testing.T, src, expected: []$T, $name: string) {
	testing.expectf(
		t,
		len(src) == len(expected),
		name + " len does not match %v vs %v",
		len(src),
		len(expected),
	)
	match := true
	for i := 0; match && i < len(expected); i += 1 {
		match &&= src[i] == expected[i]
		if src[i] != expected[i] {
			fmt.printfln("Failed to match on index: %v for value: %x, %x", i, src[i], expected[i])
			break
		}
	}
	testing.expectf(t, match, name + " does not match. %x vs %x", src, expected)
}


@(test)
test_initial_packet :: proc(t: ^testing.T) {
	// odinfmt:disable
	initial_packet := []u8 {
		0xcd, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x01, 0x02, 0x03, 0x04,
		0x05, 0x06, 0x07, 0x05, 0x63, 0x5f, 0x63, 0x69, 0x64, 0x00, 0x41,
		0x03, 0x98, 0x1c, 0x36, 0xa7, 0xed, 0x78, 0x71, 0x6b, 0xe9, 0x71,
		0x1b, 0xa4, 0x98, 0xb7, 0xed, 0x86, 0x84, 0x43, 0xbb, 0x2e, 0x0c,
		0x51, 0x4d, 0x4d, 0x84, 0x8e, 0xad, 0xcc, 0x7a, 0x00, 0xd2, 0x5c,
		0xe9, 0xf9, 0xaf, 0xa4, 0x83, 0x97, 0x80, 0x88, 0xde, 0x83, 0x6b,
		0xe6, 0x8c, 0x0b, 0x32, 0xa2, 0x45, 0x95, 0xd7, 0x81, 0x3e, 0xa5,
		0x41, 0x4a, 0x91, 0x99, 0x32, 0x9a, 0x6d, 0x9f, 0x7f, 0x76, 0x0d,
		0xd8, 0xbb, 0x24, 0x9b, 0xf3, 0xf5, 0x3d, 0x9a, 0x77, 0xfb, 0xb7,
		0xb3, 0x95, 0xb8, 0xd6, 0x6d, 0x78, 0x79, 0xa5, 0x1f, 0xe5, 0x9e,
		0xf9, 0x60, 0x1f, 0x79, 0x99, 0x8e, 0xb3, 0x56, 0x8e, 0x1f, 0xdc,
		0x78, 0x9f, 0x64, 0x0a, 0xca, 0xb3, 0x85, 0x8a, 0x82, 0xef, 0x29,
		0x30, 0xfa, 0x5c, 0xe1, 0x4b, 0x5b, 0x9e, 0xa0, 0xbd, 0xb2, 0x9f,
		0x45, 0x72, 0xda, 0x85, 0xaa, 0x3d, 0xef, 0x39, 0xb7, 0xef, 0xaf,
		0xff, 0xa0, 0x74, 0xb9, 0x26, 0x70, 0x70, 0xd5, 0x0b, 0x5d, 0x07,
		0x84, 0x2e, 0x49, 0xbb, 0xa3, 0xbc, 0x78, 0x7f, 0xf2, 0x95, 0xd6,
		0xae, 0x3b, 0x51, 0x43, 0x05, 0xf1, 0x02, 0xaf, 0xe5, 0xa0, 0x47,
		0xb3, 0xfb, 0x4c, 0x99, 0xeb, 0x92, 0xa2, 0x74, 0xd2, 0x44, 0xd6,
		0x04, 0x92, 0xc0, 0xe2, 0xe6, 0xe2, 0x12, 0xce, 0xf0, 0xf9, 0xe3,
		0xf6, 0x2e, 0xfd, 0x09, 0x55, 0xe7, 0x1c, 0x76, 0x8a, 0xa6, 0xbb,
		0x3c, 0xd8, 0x0b, 0xbb, 0x37, 0x55, 0xc8, 0xb7, 0xeb, 0xee, 0x32,
		0x71, 0x2f, 0x40, 0xf2, 0x24, 0x51, 0x19, 0x48, 0x70, 0x21, 0xb4,
		0xb8, 0x4e, 0x15, 0x65, 0xe3, 0xca, 0x31, 0x96, 0x7a, 0xc8, 0x60,
		0x4d, 0x40, 0x32, 0x17, 0x0d, 0xec, 0x28, 0x0a, 0xee, 0xfa, 0x09,
		0x5d, 0x08, 0xb3, 0xb7, 0x24, 0x1e, 0xf6, 0x64, 0x6a, 0x6c, 0x86,
		0xe5, 0xc6, 0x2c, 0xe0, 0x8b, 0xe0, 0x99
	}
	// odinfmt:enable

	f0 := quic.new_frame(quic.Crypto_Frame)
	defer free(f0)
	
	// odinfmt:disable
	f0.crypto_data = []u8 {
		0x01, 0x00, 0x00, 0xea, 0x03, 0x03, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
		0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
		0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
		0x1e, 0x1f, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01,
		0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x18, 0x00, 0x16, 0x00, 0x00, 0x13,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x75, 0x6c, 0x66, 0x68,
		0x65, 0x69, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x00, 0x0a, 0x00, 0x08, 0x00,
		0x06, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x10, 0x00, 0x0b, 0x00,
		0x09, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x31, 0x2e, 0x30, 0x00, 0x0d,
		0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03,
		0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x33,
		0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x35, 0x80, 0x72, 0xd6,
		0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
		0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2,
		0xcd, 0x16, 0x62, 0x54, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x2b,
		0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x39, 0x00, 0x31, 0x03, 0x04, 0x80,
		0x00, 0xff, 0xf7, 0x04, 0x04, 0x80, 0xa0, 0x00, 0x00, 0x05, 0x04, 0x80,
		0x10, 0x00, 0x00, 0x06, 0x04, 0x80, 0x10, 0x00, 0x00, 0x07, 0x04, 0x80,
		0x10, 0x00, 0x00, 0x08, 0x01, 0x0a, 0x09, 0x01, 0x0a, 0x0a, 0x01, 0x03,
		0x0b, 0x01, 0x19, 0x0f, 0x05, 0x63, 0x5f, 0x63, 0x69, 0x64
	}
	// odinfmt:enable


	expected_st := quic.Initial_Packet {
		version        = 1,
		dest_conn_id   = []u8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
		source_conn_id = []u8{0x63, 0x5f, 0x63, 0x69, 0x64},
		packet_number  = 0,
		packet_payload = []^quic.Frame{f0},
	}

	untyped_packet_st, remaining_data, pkt_err := quic.process_incoming_packet(
		initial_packet,
	)

	testing.expectf(
		t,
		len(remaining_data) == 0,
		"Expected remaining data to be nil.",
	)

	testing.expectf(t, pkt_err == nil, "Found error in packet: %v", pkt_err)
	testing.expect(t, len(remaining_data) == 0, "Not all data was processed")

	packet_st, is_initial := untyped_packet_st.(quic.Initial_Packet)
	testing.expect(t, is_initial, "Wrong Packet_Type")

	testing.expect(t, packet_st.version == expected_st.version, "Wrong Version")

	expect_array_match(
		t,
		packet_st.dest_conn_id,
		expected_st.dest_conn_id,
		"dest_conn_id",
	)
	expect_array_match(
		t,
		packet_st.source_conn_id,
		expected_st.source_conn_id,
		"source_conn_id",
	)
	expect_array_match(t, packet_st.token, expected_st.token, "token")


	testing.expect(
		t,
		packet_st.packet_number == expected_st.packet_number,
		"Wrong packet_number",
	)

	testing.expect(t, len(packet_st.packet_payload) == 1, "Wrong Payload Length")

	pkt_f := packet_st.packet_payload[0]
	pkt_f_var, is_crypto_frame := pkt_f.variant.(^quic.Crypto_Frame)
	testing.expectf(t, is_crypto_frame, "Wrong Frame Type %v", pkt_f.variant)

	testing.expect(t, pkt_f_var.offset == 0, "Wrong Offset")

	expect_array_match(t, pkt_f_var.crypto_data, f0.crypto_data, "Crypto Data")
}

@(test)
test_handshake_packet :: proc(t: ^testing.T) {
	// odinfmt:disable
	handshake_packet :: []u8{
		0xed, 0x00, 0x00, 0x00, 0x01, 0x05, 0x63, 0x5f, 0x63, 0x69, 0x64, 0x05,
		0x73, 0x5f, 0x63, 0x69, 0x64, 0x44, 0x14, 0xb7, 0xdd, 0x73, 0xae, 0x29,
		0x62, 0x09, 0xdf, 0xf2, 0xd0, 0x2d, 0x3d, 0x50, 0xaf, 0x69, 0x21, 0x76,
		0xdd, 0x4d, 0x50, 0x9f, 0xe8, 0xcb, 0x1b, 0x46, 0xe4, 0x5b, 0x09, 0x36,
		0x4d, 0x81, 0x5f, 0xa7, 0xa5, 0x74, 0x8e, 0x21, 0x80, 0xda, 0xd2, 0xb7,
		0xb6, 0x68, 0xca, 0xb8, 0x6f, 0xbd, 0xc2, 0x98, 0x8c, 0x45, 0xcb, 0xb8,
		0x51, 0xdd, 0xcf, 0x16, 0x01, 0xb7, 0x80, 0xd7, 0x48, 0xb9, 0xee, 0x64, 
		0x1e, 0xbc, 0xbe, 0x20, 0x12, 0x6e, 0x32, 0x26, 0x7e, 0x66, 0x4d, 0x2f,
		0x37, 0xcf, 0x53, 0xb7, 0x53, 0xd1, 0x24, 0x71, 0x7c, 0x2e, 0x13, 0xc4,
		0x8a, 0x09, 0xe3, 0x42, 0x8b, 0x11, 0xdc, 0x73, 0xba, 0xeb, 0xd4, 0x98,
		0xe8, 0xca, 0xf5, 0xbe, 0xce, 0xfe, 0xa7, 0x60, 0xd0, 0xe7, 0xa5, 0xcd,
		0xb7, 0x6b, 0x52, 0xbc, 0xb1, 0x92, 0x29, 0x97, 0x3e, 0x5d, 0x09, 0xaa,
		0x05, 0x5e, 0x9c, 0x97, 0x18, 0xdc, 0x58, 0x14, 0x54, 0x77, 0x5c, 0x58,
		0xec, 0xdd, 0x5e, 0xe7, 0xe7, 0x72, 0x78, 0xf5, 0x60, 0x10, 0x70, 0x40,
		0x41, 0x62, 0xa7, 0x9e, 0xe8, 0xc5, 0x96, 0x45, 0xd6, 0xca, 0x24, 0xa2,
		0x00, 0x18, 0x6a, 0xe9, 0x9c, 0xe4, 0x7e, 0xac, 0xe1, 0xcf, 0xc9, 0x52,
		0x7b, 0x24, 0xae, 0x8b, 0xc6, 0xcc, 0xdb, 0xac, 0xb7, 0x9b, 0x81, 0xc9,
		0x1a, 0x26, 0x95, 0x47, 0x07, 0xba, 0x35, 0xcb, 0xa0, 0xca, 0xe9, 0xaf,
		0xf4, 0x18, 0xc6, 0xe0, 0x8d, 0xa6, 0x50, 0x61, 0x63, 0xa3, 0x9f, 0x19,
		0xb6, 0x76, 0xa6, 0x6a, 0xc1, 0x74, 0xe3, 0x29, 0x5f, 0x1a, 0xb9, 0xea,
		0x73, 0x83, 0xa9, 0xc2, 0x85, 0xd7, 0x3e, 0x95, 0x75, 0x8d, 0xc9, 0xbd,
		0x8d, 0xa9, 0x07, 0x34, 0xa9, 0xfe, 0xdf, 0xd7, 0xe1, 0xf7, 0x4d, 0x2b,
		0x69, 0xc7, 0x0b, 0xf7, 0x39, 0xa4, 0x8c, 0x5a, 0x5d, 0x0a, 0xfa, 0x0b,
		0xfa, 0x16, 0x03, 0x47, 0x1b, 0x0c, 0x61, 0xa9, 0xca, 0xde, 0x12, 0x0b,
		0x39, 0x86, 0xa6, 0xce, 0x02, 0x95, 0xbe, 0x82, 0x28, 0xc6, 0x92, 0x70,
		0x13, 0xb0, 0x6d, 0xa5, 0x8d, 0x31, 0x99, 0x62, 0x31, 0xb9, 0xe3, 0x15,
		0x0b, 0xb5, 0x82, 0x70, 0x96, 0x0e, 0x61, 0xcb, 0xc6, 0x69, 0x8a, 0x2f,
		0x13, 0x79, 0xa2, 0x25, 0x84, 0x65, 0xda, 0x73, 0x25, 0xb3, 0x49, 0xc6,
		0xcd, 0x55, 0xd1, 0x05, 0xfd, 0x54, 0x85, 0xfd, 0x0a, 0xc7, 0x9a, 0x1d,
		0xf1, 0xdb, 0xba, 0x7f, 0x85, 0xb4, 0x9b, 0x72, 0x36, 0x5b, 0xfa, 0xb9,
		0xd5, 0x78, 0xe0, 0x1d, 0xcb, 0xff, 0x85, 0x15, 0xa6, 0x32, 0xfd, 0x70,
		0x01, 0x38, 0x2e, 0xd9, 0x0f, 0x6c, 0xdc, 0xb1, 0x7d, 0xb9, 0x9a, 0x33,
		0xfa, 0x11, 0x81, 0xf6, 0xf6, 0x1a, 0x89, 0xe7, 0x83, 0xcf, 0xb0, 0x42,
		0xfc, 0x0f, 0x2f, 0x67, 0xcd, 0xb6, 0x0e, 0x89, 0xf2, 0x63, 0x88, 0x56,
		0x81, 0xae, 0x64, 0x5a, 0x1c, 0x7a, 0xb1, 0x59, 0x0e, 0xb2, 0xf8, 0x46,
		0x9f, 0x46, 0x0f, 0x04, 0xe0, 0x9f, 0xea, 0x2a, 0x3a, 0x41, 0x1b, 0x49,
		0x86, 0x63, 0x01, 0x0b, 0x3c, 0x38, 0x2a, 0x3f, 0x25, 0x83, 0x7c, 0x2c,
		0x70, 0x86, 0xaf, 0x5a, 0x9a, 0xd2, 0x90, 0xcf, 0x3c, 0xcf, 0x1a, 0xc6,
		0xeb, 0x0f, 0x44, 0x55, 0x35, 0xe8, 0xb0, 0x0a, 0x55, 0x7c, 0x87, 0xa5,
		0x3d, 0x93, 0x07, 0x14, 0x62, 0xa0, 0xbc, 0x22, 0x61, 0x4e, 0x5c, 0x3a,
		0xe0, 0x84, 0x17, 0xb7, 0x20, 0xa7, 0x36, 0xc1, 0xad, 0x48, 0xea, 0x37,
		0x75, 0xcd, 0x0f, 0x00, 0x9f, 0x0c, 0x57, 0x50, 0x0e, 0x0b, 0xb2, 0xe7,
		0xe9, 0xc5, 0x3f, 0x83, 0x69, 0x9a, 0x47, 0xe5, 0xf1, 0x3b, 0xb2, 0x07,
		0x72, 0xab, 0x23, 0x50, 0x64, 0x24, 0xb7, 0x6f, 0x6e, 0xf9, 0x6a, 0x61,
		0xc9, 0x17, 0x22, 0x6e, 0x6e, 0x04, 0x8d, 0xe6, 0xf8, 0x24, 0x26, 0xca,
		0x63, 0xea, 0xbf, 0x3b, 0x59, 0x43, 0xaf, 0x0b, 0x5f, 0x0d, 0x12, 0x3d,
		0x9a, 0xf0, 0x45, 0xbb, 0x35, 0x7c, 0xad, 0xbd, 0x10, 0x92, 0xad, 0x0a,
		0x1d, 0x75, 0x51, 0x16, 0x2a, 0x3b, 0x4b, 0x48, 0x6c, 0x27, 0x1e, 0x00,
		0x24, 0x4b, 0x23, 0xd8, 0xad, 0xec, 0x81, 0xc9, 0x2e, 0x31, 0x23, 0x9c,
		0x75, 0xaf, 0x41, 0xcb, 0x07, 0x98, 0x08, 0x57, 0x1b, 0x48, 0xac, 0xb5,
		0x07, 0x33, 0x3f, 0xfb, 0xf1, 0xa4, 0x86, 0xd8, 0x05, 0x3e, 0xdc, 0xc8,
		0x62, 0xb6, 0xa9, 0xbf, 0xd3, 0x6a, 0x09, 0xcd, 0xdb, 0xa3, 0x29, 0x1b,
		0x9b, 0x8b, 0xa1, 0x58, 0x49, 0x34, 0x59, 0x80, 0x5c, 0xe2, 0x41, 0xda,
		0xf5, 0xc1, 0x30, 0x85, 0x99, 0xfc, 0x0e, 0x6e, 0x6e, 0xa7, 0x10, 0x30,
		0x33, 0xb2, 0x94, 0xcc, 0x7a, 0x5f, 0xdb, 0x2d, 0x46, 0x54, 0xf1, 0xd4,
		0x40, 0x78, 0x25, 0xeb, 0xc3, 0x75, 0xab, 0xdf, 0xb2, 0xcc, 0xa1, 0xab,
		0xf5, 0xa2, 0x41, 0x34, 0x3d, 0xec, 0x3b, 0x16, 0x5d, 0x32, 0x0a, 0xf8,
		0x4b, 0xc1, 0xfa, 0x21, 0x11, 0x2e, 0xfd, 0xb9, 0xd4, 0x5c, 0x6c, 0xfc,
		0x7b, 0x8a, 0x64, 0x42, 0xff, 0x59, 0x3d, 0x09, 0x21, 0x93, 0x36, 0xfa,
		0x07, 0x56, 0xd9, 0xe4, 0x5b, 0xab, 0x4f, 0xa6, 0x33, 0x94, 0xa2, 0xa8,
		0x80, 0x3d, 0xf4, 0x67, 0x8e, 0x79, 0x21, 0x6f, 0xdf, 0x13, 0x1f, 0x55,
		0x82, 0x2f, 0x9e, 0xad, 0x69, 0x4a, 0xb7, 0x5e, 0xe2, 0x54, 0x96, 0xe6,
		0xb7, 0x8c, 0x3b, 0x09, 0x04, 0x66, 0x58, 0xe2, 0xc4, 0x27, 0xdd, 0xc4,
		0x53, 0x8a, 0xf8, 0xde, 0x2a, 0xcb, 0x81, 0x39, 0x8b, 0x74, 0x82, 0x83,
		0x37, 0xf2, 0x69, 0xcb, 0x03, 0x1d, 0x99, 0x7a, 0x5c, 0xf6, 0x3e, 0x11,
		0xab, 0x05, 0x0a, 0xa8, 0xae, 0xe1, 0xf0, 0x79, 0x62, 0xdd, 0xd7, 0x51,
		0x5a, 0xb6, 0x0e, 0x19, 0x2e, 0x40, 0x3c, 0x30, 0x03, 0x11, 0xe9, 0xe4,
		0xb9, 0xb7, 0x0f, 0x16, 0x15, 0x02, 0x9d, 0x07, 0xfe, 0x1c, 0x23, 0x19,
		0x39, 0x02, 0x71, 0x49, 0xf4, 0xfd, 0x29, 0x72, 0x02, 0x3a, 0x55, 0xde,
		0x29, 0x35, 0x65, 0x05, 0xfb, 0xe7, 0x49, 0x90, 0x8c, 0x62, 0xaa, 0x33,
		0xeb, 0x25, 0x9a, 0x39, 0x9b, 0xf7, 0x11, 0xb9, 0x2b, 0x61, 0x6c, 0xb7,
		0x48, 0xde, 0x73, 0xc8, 0xbf, 0xad, 0xd5, 0xd4, 0x3e, 0x2d, 0xae, 0x91,
		0x6a, 0x7b, 0xa0, 0xdb, 0x61, 0xdf, 0xcd, 0x6f, 0xaf, 0x95, 0x76, 0x08,
		0x26, 0x2b, 0x68, 0x34, 0xe3, 0x31, 0x85, 0xb8, 0xd5, 0x59, 0x8f, 0x87,
		0xe6, 0x99, 0x2a, 0xac, 0xf5, 0x76, 0x96, 0xad, 0xd5, 0x55, 0x8a, 0x7d,
		0x96, 0x94, 0x38, 0x1f, 0x5d, 0x7d, 0x65, 0x9d, 0xa2, 0xde, 0x95, 0x1b,
		0x60, 0x74, 0x78, 0xf6, 0x1d, 0xa2, 0x08, 0xa2, 0x4a, 0x07, 0xba, 0x8d,
		0xa0, 0x02, 0x58, 0xfa, 0x7f, 0x2f, 0xe1, 0x0d, 0xef, 0x61, 0x83, 0x26,
		0x7f, 0x5d, 0x38, 0xe0, 0x4c, 0x94, 0x23, 0x00, 0xb9, 0xc8, 0x74, 0xe8,
		0x98, 0x3c, 0x1b, 0xe1, 0x4e, 0x16, 0x08, 0xff, 0xdc, 0xa6, 0x7d, 0x7e,
		0x45, 0x13, 0xcc, 0x0c, 0xb9, 0xca, 0xb8, 0x1d, 0x63, 0x19, 0xdd, 0x10,
		0x74, 0xb2, 0x17, 0xe5, 0x19, 0x54, 0x65, 0x13, 0x1e, 0x06, 0xdd, 0x0b,
		0xaf, 0xab, 0xa8, 0x4e, 0xb5, 0x2c, 0x22, 0xa4, 0xa8, 0xc6, 0x12, 0xa4,
		0x05, 0xfe, 0x6c, 0x87, 0x42, 0x32, 0xe4, 0xa9, 0x34, 0x61, 0x1b, 0xc7,
		0x3c, 0x56, 0xfe, 0x70, 0xb2, 0xcb, 0x7a, 0x59, 0x6c, 0x1f, 0x53, 0xc7,
		0x29, 0xb6, 0x64, 0x3c, 0xbd, 0x70, 0xd5, 0x30, 0xfe, 0x31, 0x96, 0x06,
		0x9f, 0xc0, 0x07, 0x8e, 0x89, 0xfb, 0xb7, 0x0d, 0xc1, 0xb3, 0x8a, 0xb4,
		0xe1, 0x77, 0x0c, 0x8f, 0xfb, 0x53, 0x31, 0x6d, 0x67, 0x3a, 0x32, 0xb8,
		0x92, 0x59, 0xb5, 0xd3, 0x3e, 0x94, 0xad, 
	}

	decrypted_crypto_frame := []u8{
		0x08, 0x00, 0x00, 0x56, 0x00, 0x54, 0x00, 0x10, 0x00, 0x0b, 0x00, 0x09,
		0x08, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x31, 0x2e, 0x30, 0x00, 0x39, 0x00,
		0x41, 0x00, 0x08, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x01,
		0x04, 0x80, 0x01, 0xd4, 0xc0, 0x03, 0x04, 0x80, 0x00, 0xff, 0xf7, 0x04,
		0x04, 0x80, 0x50, 0x00, 0x00, 0x05, 0x04, 0x80, 0x08, 0x00, 0x00, 0x06,
		0x04, 0x80, 0x08, 0x00, 0x00, 0x07, 0x04, 0x80, 0x08, 0x00, 0x00, 0x08,
		0x01, 0x02, 0x09, 0x01, 0x02, 0x0a, 0x01, 0x03, 0x0b, 0x01, 0x19, 0x0f,
		0x05, 0x73, 0x5f, 0x63, 0x69, 0x64, 0x0b, 0x00, 0x03, 0x2e, 0x00, 0x00,
		0x03, 0x2a, 0x00, 0x03, 0x25, 0x30, 0x82, 0x03, 0x21, 0x30, 0x82, 0x02,
		0x09, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x15, 0x5a, 0x92, 0xad,
		0xc2, 0x04, 0x8f, 0x90, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
		0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x30, 0x22, 0x31, 0x0b, 0x30,
		0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x13,
		0x30, 0x11, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0a, 0x45, 0x78, 0x61,
		0x6d, 0x70, 0x6c, 0x65, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x31,
		0x38, 0x31, 0x30, 0x30, 0x35, 0x30, 0x31, 0x33, 0x38, 0x31, 0x37, 0x5a,
		0x17, 0x0d, 0x31, 0x39, 0x31, 0x30, 0x30, 0x35, 0x30, 0x31, 0x33, 0x38,
		0x31, 0x37, 0x5a, 0x30, 0x2b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55,
		0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x1c, 0x30, 0x1a, 0x06, 0x03,
		0x55, 0x04, 0x03, 0x13, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
		0x2e, 0x75, 0x6c, 0x66, 0x68, 0x65, 0x69, 0x6d, 0x2e, 0x6e, 0x65, 0x74,
		0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
		0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
		0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc4, 0x80, 0x36,
		0x06, 0xba, 0xe7, 0x47, 0x6b, 0x08, 0x94, 0x04, 0xec, 0xa7, 0xb6, 0x91,
		0x04, 0x3f, 0xf7, 0x92, 0xbc, 0x19, 0xee, 0xfb, 0x7d, 0x74, 0xd7, 0xa8,
		0x0d, 0x00, 0x1e, 0x7b, 0x4b, 0x3a, 0x4a, 0xe6, 0x0f, 0xe8, 0xc0, 0x71,
		0xfc, 0x73, 0xe7, 0x02, 0x4c, 0x0d, 0xbc, 0xf4, 0xbd, 0xd1, 0x1d, 0x39,
		0x6b, 0xba, 0x70, 0x46, 0x4a, 0x13, 0xe9, 0x4a, 0xf8, 0x3d, 0xf3, 0xe1,
		0x09, 0x59, 0x54, 0x7b, 0xc9, 0x55, 0xfb, 0x41, 0x2d, 0xa3, 0x76, 0x52,
		0x11, 0xe1, 0xf3, 0xdc, 0x77, 0x6c, 0xaa, 0x53, 0x37, 0x6e, 0xca, 0x3a,
		0xec, 0xbe, 0xc3, 0xaa, 0xb7, 0x3b, 0x31, 0xd5, 0x6c, 0xb6, 0x52, 0x9c,
		0x80, 0x98, 0xbc, 0xc9, 0xe0, 0x28, 0x18, 0xe2, 0x0b, 0xf7, 0xf8, 0xa0,
		0x3a, 0xfd, 0x17, 0x04, 0x50, 0x9e, 0xce, 0x79, 0xbd, 0x9f, 0x39, 0xf1,
		0xea, 0x69, 0xec, 0x47, 0x97, 0x2e, 0x83, 0x0f, 0xb5, 0xca, 0x95, 0xde,
		0x95, 0xa1, 0xe6, 0x04, 0x22, 0xd5, 0xee, 0xbe, 0x52, 0x79, 0x54, 0xa1,
		0xe7, 0xbf, 0x8a, 0x86, 0xf6, 0x46, 0x6d, 0x0d, 0x9f, 0x16, 0x95, 0x1a,
		0x4c, 0xf7, 0xa0, 0x46, 0x92, 0x59, 0x5c, 0x13, 0x52, 0xf2, 0x54, 0x9e,
		0x5a, 0xfb, 0x4e, 0xbf, 0xd7, 0x7a, 0x37, 0x95, 0x01, 0x44, 0xe4, 0xc0,
		0x26, 0x87, 0x4c, 0x65, 0x3e, 0x40, 0x7d, 0x7d, 0x23, 0x07, 0x44, 0x01,
		0xf4, 0x84, 0xff, 0xd0, 0x8f, 0x7a, 0x1f, 0xa0, 0x52, 0x10, 0xd1, 0xf4,
		0xf0, 0xd5, 0xce, 0x79, 0x70, 0x29, 0x32, 0xe2, 0xca, 0xbe, 0x70, 0x1f,
		0xdf, 0xad, 0x6b, 0x4b, 0xb7, 0x11, 0x01, 0xf4, 0x4b, 0xad, 0x66, 0x6a,
		0x11, 0x13, 0x0f, 0xe2, 0xee, 0x82, 0x9e, 0x4d, 0x02, 0x9d, 0xc9, 0x1c,
		0xdd, 0x67, 0x16, 0xdb, 0xb9, 0x06, 0x18, 0x86, 0xed, 0xc1, 0xba, 0x94,
		0x21, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x52, 0x30, 0x50, 0x30, 0x0e,
		0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02,
		0x05, 0xa0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30,
		0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06,
		0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x30, 0x1f, 0x06,
		0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x89, 0x4f,
		0xde, 0x5b, 0xcc, 0x69, 0xe2, 0x52, 0xcf, 0x3e, 0xa3, 0x00, 0xdf, 0xb1,
		0x97, 0xb8, 0x1d, 0xe1, 0xc1, 0x46, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86,
		0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0b, 0x05, 0x00, 0x03, 0x82, 0x01,
		0x01, 0x00, 0x59, 0x16, 0x45, 0xa6, 0x9a, 0x2e, 0x37, 0x79, 0xe4, 0xf6,
		0xdd, 0x27, 0x1a, 0xba, 0x1c, 0x0b, 0xfd, 0x6c, 0xd7, 0x55, 0x99, 0xb5,
		0xe7, 0xc3, 0x6e, 0x53, 0x3e, 0xff, 0x36, 0x59, 0x08, 0x43, 0x24, 0xc9,
		0xe7, 0xa5, 0x04, 0x07, 0x9d, 0x39, 0xe0, 0xd4, 0x29, 0x87, 0xff, 0xe3,
		0xeb, 0xdd, 0x09, 0xc1, 0xcf, 0x1d, 0x91, 0x44, 0x55, 0x87, 0x0b, 0x57,
		0x1d, 0xd1, 0x9b, 0xdf, 0x1d, 0x24, 0xf8, 0xbb, 0x9a, 0x11, 0xfe, 0x80,
		0xfd, 0x59, 0x2b, 0xa0, 0x39, 0x8c, 0xde, 0x11, 0xe2, 0x65, 0x1e, 0x61,
		0x8c, 0xe5, 0x98, 0xfa, 0x96, 0xe5, 0x37, 0x2e, 0xef, 0x3d, 0x24, 0x8a,
		0xfd, 0xe1, 0x74, 0x63, 0xeb, 0xbf, 0xab, 0xb8, 0xe4, 0xd1, 0xab, 0x50,
		0x2a, 0x54, 0xec, 0x00, 0x64, 0xe9, 0x2f, 0x78, 0x19, 0x66, 0x0d, 0x3f,
		0x27, 0xcf, 0x20, 0x9e, 0x66, 0x7f, 0xce, 0x5a, 0xe2, 0xe4, 0xac, 0x99,
		0xc7, 0xc9, 0x38, 0x18, 0xf8, 0xb2, 0x51, 0x07, 0x22, 0xdf, 0xed, 0x97,
		0xf3, 0x2e, 0x3e, 0x93, 0x49, 0xd4, 0xc6, 0x6c, 0x9e, 0xa6, 0x39, 0x6d,
		0x74, 0x44, 0x62, 0xa0, 0x6b, 0x42, 0xc6, 0xd5, 0xba, 0x68, 0x8e, 0xac,
		0x3a, 0x01, 0x7b, 0xdd, 0xfc, 0x8e, 0x2c, 0xfc, 0xad, 0x27, 0xcb, 0x69,
		0xd3, 0xcc, 0xdc, 0xa2, 0x80, 0x41, 0x44, 0x65, 0xd3, 0xae, 0x34, 0x8c,
		0xe0, 0xf3, 0x4a, 0xb2, 0xfb, 0x9c, 0x61, 0x83, 0x71, 0x31, 0x2b, 0x19,
		0x10, 0x41, 0x64, 0x1c, 0x23, 0x7f, 0x11, 0xa5, 0xd6, 0x5c, 0x84, 0x4f,
		0x04, 0x04, 0x84, 0x99, 0x38, 0x71, 0x2b, 0x95, 0x9e, 0xd6, 0x85, 0xbc,
		0x5c, 0x5d, 0xd6, 0x45, 0xed, 0x19, 0x90, 0x94, 0x73, 0x40, 0x29, 0x26,
		0xdc, 0xb4, 0x0e, 0x34, 0x69, 0xa1, 0x59, 0x41, 0xe8, 0xe2, 0xcc, 0xa8,
		0x4b, 0xb6, 0x08, 0x46, 0x36, 0xa0, 0x00, 0x00, 0x0f, 0x00, 0x01, 0x04,
		0x08, 0x04, 0x01, 0x00, 0x0a, 0x99, 0xaf, 0x32, 0xa9, 0xe4, 0x06, 0xd7,
		0x25, 0xf9, 0xa9, 0x39, 0x6d, 0xe5, 0xaf, 0x37, 0x56, 0xb7, 0xa8, 0xf6,
		0xe4, 0xda, 0xd5, 0x85, 0xab, 0xc3, 0xf8, 0x7c, 0x6d, 0x1f, 0xc1, 0x5f,
		0x5f, 0x00, 0xab, 0xa8, 0xdc, 0xa9, 0xd0, 0x5c, 0xdb, 0x51, 0xd3, 0xc9,
		0x35, 0x43, 0x36, 0x56, 0xd8, 0x8b, 0x74, 0x32, 0x00, 0x5e, 0xe7, 0xe0,
		0x48, 0x03, 0xb2, 0x47, 0x57, 0x44, 0xd7, 0x55, 0x5c, 0xf3, 0xde, 0x48,
		0x9c, 0xc2, 0x16, 0xa4, 0x85, 0xa7, 0x28, 0xb2, 0x18, 0x90, 0xe8, 0x7a,
		0xa9, 0x41, 0x5d, 0x19, 0xe6, 0x3a, 0x6a, 0x77, 0x9b, 0x9c, 0xdb, 0xb1,
		0x28, 0xa8, 0x04, 0xc4, 0x28, 0xb8, 0x27, 0xfa, 0x65, 0xdf, 0xcd, 0x95,
		0x2a, 0xce, 0x54
	}
	// odinfmt:enable

	quic.init_quic_context({}, {send_limit = 2, role = .Client})
	secrets: [quic.Secret_Role]quic.TLS_Secret
	conn := quic.conn_create(secrets, net.Endpoint{})
	level := ssl.QUIC_Encryption_Level.Handshake_Encryption

	dest_conn_id := []u8{0x63, 0x5f, 0x63, 0x69, 0x64}

	// stolen from set_secret because the validation data from
	// https://quic.xargs.org/#server-handshake-packet does not include
	// the secret for this example
	e := &conn.encryption.secrets[level][.Read]
	key_len := quic.Key_Len[e.cipher]
	algo := quic.Hash_Algo[e.cipher]
	{
		sync.guard(&conn.encryption.lock)
		e.key = quic.hex_decode_const("17abbf0a788f96c6986964660414e7ec")
		e.iv = quic.hex_decode_const("09597a2ea3b04c00487e71f3")
		e.hp = quic.hex_decode_const("2a18061c396c2828582b41b0910ed536")
		e.cipher = quic.Packet_Protection_Algorithm.AEAD_AES_128_GCM
		e.valid = true
	}
	quic.conn_save_issued_dest_conn_id(conn, dest_conn_id)


	untyped_packet_st, remaining_data, pkt_err := quic.process_incoming_packet(
		handshake_packet,
	)

	packet := untyped_packet_st.(quic.Handshake_Packet)
	pkt_crypto_frame := packet.packet_payload[0].variant.(^quic.Crypto_Frame)

	testing.expectf(t, pkt_err == nil, "There was an error: %v", pkt_err)
	testing.expectf(t, untyped_packet_st != nil, "Packet was null")
	expect_array_match(
		t,
		decrypted_crypto_frame,
		pkt_crypto_frame.crypto_data,
		"crypto_data",
	)
}

@(test)
test_application_packet :: proc(t: ^testing.T) {
	quic.init_quic_context({}, {send_limit = 2, role = .Client})
	secrets: [quic.Secret_Role]quic.TLS_Secret
	conn := quic.conn_create(secrets, net.Endpoint{})
	level := ssl.QUIC_Encryption_Level.Application_Encryption

	// UDP datagram 6 from https://quic.xargs.org/#server-application-packet/annotated
	// odinfmt:disable
	packet_data  := []u8{
		0x49, 0x63, 0x5f, 0x63, 0x69, 0x64, 0xcd, 0x9a, 0x64, 0x12, 0x40, 0x57,
		0xc8, 0x83, 0xe9, 0x4d, 0x9c, 0x29, 0x6b, 0xaa, 0x8c, 0xa0, 0xea, 0x6e,
		0x3a, 0x21, 0xfa, 0xaf, 0x99, 0xaf, 0x2f, 0xe1, 0x03, 0x21, 0x69, 0x20,
		0x57, 0xd2,
	}
	// odinfmt:enable
	dest_conn_id := []u8{0x63, 0x5f, 0x63, 0x69, 0x64, }

	// expected frames include this ack frame, a handshake done frame
	// and the following stream frame
	ack_frame := quic.Ack_Frame{
		largest_ack = 0,
		ack_delay = 12,
		first_ack_range = 0,
	}
	stream_frame := quic.Stream_Frame{
		has_offset = true,
		has_len = true,
		fin_bit = true,
		stream_id = 0,
		offset = 0,
		stream_data = { 0x70, 0x6f, 0x6e, 0x67 }
	}

	// stolen from set_secret because the validation data from
	// https://quic.xargs.org/#server-handshake-packet does not include
	// the secret for this example
	e := &conn.encryption.secrets[level][.Read]
	key_len := quic.Key_Len[e.cipher]
	algo := quic.Hash_Algo[e.cipher]
	{
		sync.guard(&conn.encryption.lock)
		e.key = quic.hex_decode_const("fd8c7da9de1b2da4d2ef9fd5188922d0")
		e.iv = quic.hex_decode_const("02f6180e4f4aa456d7e8a602")
		e.hp = quic.hex_decode_const("b7f6f021453e52b58940e4bba72a35d4")
		e.cipher = quic.Packet_Protection_Algorithm.AEAD_AES_128_GCM
		e.valid = true
	}
	quic.conn_save_issued_dest_conn_id(conn, dest_conn_id)

	untyped_packet_st, remaining_data, pkt_err := quic.process_incoming_packet(
		packet_data,
	)
	testing.expectf(t, pkt_err == nil, "packet had error: %v", pkt_err)

	pkt_app, pkt_ok := untyped_packet_st.(quic.One_RTT_Packet)
	testing.expectf(t, pkt_ok, "packet was not application packet %v", untyped_packet_st)

	pkt_ack_frame, ack_ok := pkt_app.packet_payload[0].variant.(^quic.Ack_Frame)
	pkt_handshake_done_frame, handshake_done_ok := pkt_app.packet_payload[1].variant.(^quic.Handshake_Done_Frame)
	pkt_stream_frame, stream_ok := pkt_app.packet_payload[2].variant.(^quic.Stream_Frame)

	testing.expectf(t, ack_ok, "first frame was not an ack frame")
	testing.expectf(t, pkt_ack_frame.ack_delay == 0x12, "bad read of ack frame")

	testing.expectf(t, handshake_done_ok, "second frame was not an handshake_done frame")

	testing.expectf(t, stream_ok, "stream frame was not an stream frame")
	testing.expectf(t, pkt_stream_frame.has_offset, "bad value has_offset")
	testing.expectf(t, pkt_stream_frame.has_len, "bad value has_len")
	testing.expectf(t, pkt_stream_frame.fin_bit, "bad value fin_bit")
	expect_array_match(t, stream_frame.stream_data, pkt_stream_frame.stream_data, "stream_data not equal")
}
