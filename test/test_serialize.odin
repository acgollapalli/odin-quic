/*

SDG                                                                           JJ

                           Serialization Tests

  These are tests for Serializing packets.

*/

package tests

import "core:encoding/hex"
import "core:fmt"
import "core:net"
import "core:sync"
import "core:testing"
import "net:quic"
import "net:ssl"

@(test)
test_serialize_initial_packet :: proc(t: ^testing.T) {
	// odinfmt:disable
	initial_packet := []u8 {
		0xcd, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x01, 0x02, 0x03, 0x04,
		0x05, 0x06, 0x07, 0x05, 0x63, 0x5f, 0x63, 0x69, 0x64, 0x00, 0x41,
		0x03, 0x98, 0x1c, 0x36, 0xa7, 0xed, 0x78, 0x71, 0x6b, 0xe9, 0x71,
		0x1b, 0xa4, 0x98, 0xb7, 0xed, 0x86, 0x84, 0x43, 0xbb, 0x2e, 0x0c,
		0x51, 0x4d, 0x4d, 0x84, 0x8e, 0xad, 0xcc, 0x7a, 0x00, 0xd2, 0x5c,
		0xe9, 0xf9, 0xaf, 0xa4, 0x83, 0x97, 0x80, 0x88, 0xde, 0x83, 0x6b,
		0xe6, 0x8c, 0x0b, 0x32, 0xa2, 0x45, 0x95, 0xd7, 0x81, 0x3e, 0xa5,
		0x41, 0x4a, 0x91, 0x99, 0x32, 0x9a, 0x6d, 0x9f, 0x7f, 0x76, 0x0d,
		0xd8, 0xbb, 0x24, 0x9b, 0xf3, 0xf5, 0x3d, 0x9a, 0x77, 0xfb, 0xb7,
		0xb3, 0x95, 0xb8, 0xd6, 0x6d, 0x78, 0x79, 0xa5, 0x1f, 0xe5, 0x9e,
		0xf9, 0x60, 0x1f, 0x79, 0x99, 0x8e, 0xb3, 0x56, 0x8e, 0x1f, 0xdc,
		0x78, 0x9f, 0x64, 0x0a, 0xca, 0xb3, 0x85, 0x8a, 0x82, 0xef, 0x29,
		0x30, 0xfa, 0x5c, 0xe1, 0x4b, 0x5b, 0x9e, 0xa0, 0xbd, 0xb2, 0x9f,
		0x45, 0x72, 0xda, 0x85, 0xaa, 0x3d, 0xef, 0x39, 0xb7, 0xef, 0xaf,
		0xff, 0xa0, 0x74, 0xb9, 0x26, 0x70, 0x70, 0xd5, 0x0b, 0x5d, 0x07,
		0x84, 0x2e, 0x49, 0xbb, 0xa3, 0xbc, 0x78, 0x7f, 0xf2, 0x95, 0xd6,
		0xae, 0x3b, 0x51, 0x43, 0x05, 0xf1, 0x02, 0xaf, 0xe5, 0xa0, 0x47,
		0xb3, 0xfb, 0x4c, 0x99, 0xeb, 0x92, 0xa2, 0x74, 0xd2, 0x44, 0xd6,
		0x04, 0x92, 0xc0, 0xe2, 0xe6, 0xe2, 0x12, 0xce, 0xf0, 0xf9, 0xe3,
		0xf6, 0x2e, 0xfd, 0x09, 0x55, 0xe7, 0x1c, 0x76, 0x8a, 0xa6, 0xbb,
		0x3c, 0xd8, 0x0b, 0xbb, 0x37, 0x55, 0xc8, 0xb7, 0xeb, 0xee, 0x32,
		0x71, 0x2f, 0x40, 0xf2, 0x24, 0x51, 0x19, 0x48, 0x70, 0x21, 0xb4,
		0xb8, 0x4e, 0x15, 0x65, 0xe3, 0xca, 0x31, 0x96, 0x7a, 0xc8, 0x60,
		0x4d, 0x40, 0x32, 0x17, 0x0d, 0xec, 0x28, 0x0a, 0xee, 0xfa, 0x09,
		0x5d, 0x08, 0xb3, 0xb7, 0x24, 0x1e, 0xf6, 0x64, 0x6a, 0x6c, 0x86,
		0xe5, 0xc6, 0x2c, 0xe0, 0x8b, 0xe0, 0x99
	}
	// odinfmt:enable

	f0 := quic.new_frame(quic.Crypto_Frame)
	defer free(f0)
	
	// odinfmt:disable
	f0.crypto_data = []u8 {
		0x01, 0x00, 0x00, 0xea, 0x03, 0x03, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
		0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
		0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
		0x1e, 0x1f, 0x00, 0x00, 0x06, 0x13, 0x01, 0x13, 0x02, 0x13, 0x03, 0x01,
		0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x18, 0x00, 0x16, 0x00, 0x00, 0x13,
		0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x75, 0x6c, 0x66, 0x68,
		0x65, 0x69, 0x6d, 0x2e, 0x6e, 0x65, 0x74, 0x00, 0x0a, 0x00, 0x08, 0x00,
		0x06, 0x00, 0x1d, 0x00, 0x17, 0x00, 0x18, 0x00, 0x10, 0x00, 0x0b, 0x00,
		0x09, 0x08, 0x70, 0x69, 0x6e, 0x67, 0x2f, 0x31, 0x2e, 0x30, 0x00, 0x0d,
		0x00, 0x14, 0x00, 0x12, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03,
		0x08, 0x05, 0x05, 0x01, 0x08, 0x06, 0x06, 0x01, 0x02, 0x01, 0x00, 0x33,
		0x00, 0x26, 0x00, 0x24, 0x00, 0x1d, 0x00, 0x20, 0x35, 0x80, 0x72, 0xd6,
		0x36, 0x58, 0x80, 0xd1, 0xae, 0xea, 0x32, 0x9a, 0xdf, 0x91, 0x21, 0x38,
		0x38, 0x51, 0xed, 0x21, 0xa2, 0x8e, 0x3b, 0x75, 0xe9, 0x65, 0xd0, 0xd2,
		0xcd, 0x16, 0x62, 0x54, 0x00, 0x2d, 0x00, 0x02, 0x01, 0x01, 0x00, 0x2b,
		0x00, 0x03, 0x02, 0x03, 0x04, 0x00, 0x39, 0x00, 0x31, 0x03, 0x04, 0x80,
		0x00, 0xff, 0xf7, 0x04, 0x04, 0x80, 0xa0, 0x00, 0x00, 0x05, 0x04, 0x80,
		0x10, 0x00, 0x00, 0x06, 0x04, 0x80, 0x10, 0x00, 0x00, 0x07, 0x04, 0x80,
		0x10, 0x00, 0x00, 0x08, 0x01, 0x0a, 0x09, 0x01, 0x0a, 0x0a, 0x01, 0x03,
		0x0b, 0x01, 0x19, 0x0f, 0x05, 0x63, 0x5f, 0x63, 0x69, 0x64
	}
	// odinfmt:enable


	packet_st := quic.Initial_Packet {
		version        = 1,
		dest_conn_id   = []u8{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07},
		source_conn_id = []u8{0x63, 0x5f, 0x63, 0x69, 0x64},
		packet_number  = 0,
		packet_payload = []^quic.Frame{f0},
	}


	quic.init_quic_context({}, {send_limit = 2, role = .Client})
	out := [][]u8 {
		make([]u8, 128),
		make([]u8, 512),
	}
	defer {
		for buf in out {
			delete(buf)
		}
	}

	returned_packet := quic.serialize_packet(nil, packet_st, out)

	test_buf : [dynamic]u8; defer delete(test_buf)
	for buf in out {
		append(&test_buf, ..buf)
	}
	
	expect_array_match(t, initial_packet, test_buf[:], "Crypto Data")
}
